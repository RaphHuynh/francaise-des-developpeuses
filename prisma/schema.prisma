// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String  @map("user_id")
  type              String
  provider          String
  providerAccountId String  @map("provider_account_id")
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique @map("session_token")
  userId       String   @map("user_id")
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model User {
  id             String        @id @default(cuid())
  userId         Int?          @default(autoincrement())
  name           String?
  firstname      String?       @db.VarChar(50)
  lastname       String?       @db.VarChar(50)
  description    String?
  email          String?       @unique
  emailVerified  DateTime?     @map("email_verified")
  image          String?
  accounts       Account[]
  sessions       Session[]
  admin          Boolean       @default(false)
  urlPortfolio   String?       @db.VarChar(320)
  imagePortfolio String?
  categories     Category[]
  UserNetwork    UserNetwork[]

  @@map("users")
}

model Category {
  id    Int    @id @default(autoincrement())
  name  String @db.VarChar(255)
  users User[]
}

model UserNetwork {
  user      User    @relation(fields: [userId], references: [id])
  network   Network @relation(fields: [networkId], references: [id])
  userId    String
  networkId Int
  url       String

  @@id([userId, networkId])
}

model Network {
  id          Int           @id @default(autoincrement())
  name        String        @db.VarChar(255)
  UserNetwork UserNetwork[]
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@unique([identifier, token])
  @@map("verificationtokens")
}
